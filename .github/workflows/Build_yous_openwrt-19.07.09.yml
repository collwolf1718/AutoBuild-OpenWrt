#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Modified for lean/openwrt

name: 云编译适配19.07的MTK路由器

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      model:
        description: '选择机型'
        required: true
        default: 'psg1218a' 
        type: choice
        options:
          - 'miwifi-nano'
          - 'miwifi-mini'
          - 'miwifi-r3'
          - 'miwifi-r3x'
          - 'miwifi-3a'
          - 'miwifi-3c'
          - 'phicomm_psg1218a'
          - 'miwifi-4c'
          - 'psg1218a'
      UPLOAD_BIN_DIR:
        type: boolean
        description: '上传bin文件夹'
        required: false
        default: 'false'
      UPLOAD_FIRMWARE:
        type: boolean
        description: '上传固件'
        required: false
        default: 'true'
      UPLOAD_RELEASE:
        type: boolean
        description: '上传RELEASE'
        required: false
        default: 'true'
      
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
        type: boolean
#   schedule:                           # 时间表
#     - cron: '0 19 * * *'              # 每天国际时间19点，北京时间凌晨3点执行(北京+8)
#  push: # push 操作
#    branches: # 分支
      #- master # 主分支
    #   paths:                            # 路径
    #     - openwrt/*                     # 监听openwrt目录下所有文件的push操作
    #paths: # 路径
      #- logs/g-dock.md # 监听logs目录下 k2.md 的push操作
  # watch:                              # 监视操作
  #   types: [started]                  # 点击 star 之后
  
env:
  REPO_URL: https://github.com/yuos-bit/openwrt
  REPO_BRANCH: openwrt-19.07
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/19.07/Yuos_${{ github.event.inputs.model }}.config
 #   DIY_P1_SH: diy-part4.sh
  #  DIY_P2_SH: diy-part5.sh
#  UPLOAD_BIN_DIR: true
#  UPLOAD_FIRMWARE: true
#  UPLOAD_COWTRANSFER: false
#  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查环境
      uses: actions/checkout@main

    - name: 初始化
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libip4tc2 libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
        vim wget xmlto xxd zlib1g-dev python3-setuptools
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 拉取源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 定义第一脚本
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新插件
      run: cd openwrt && ./scripts/feeds update -a

    - name: 设置xray1.7.2
      run: |
          cd openwrt
          cp -rf $GITHUB_WORKSPACE/patchs/xray/1.7.2/Makefile feeds/helloworld/xray-core/Makefile
          cp -rf $GITHUB_WORKSPACE/patchs/xray/1.7.2/Makefile feeds/packages/net/xray-core/Makefile 

          cp -rf $GITHUB_WORKSPACE/patchs/xray/1.5.5/xray feeds/helloworld/xray-core/xray
          cp -rf $GITHUB_WORKSPACE/patchs/xray/1.5.5/xray feeds/packages/net/xray-core/xray

    - name: 降级fullconenat-nft
      run: |
        cd openwrt
        rm -rf feeds/small8/fullconenat
        rm -rf feeds/small8/fullconenat-nft
         cp -rf $GITHUB_WORKSPACE/patchs/firewall/fullconenat package/fullconenat

    - name: 安装插件
      run: cd openwrt && ./scripts/feeds install -a

    - name: 定义第二脚本
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 调整SSH
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 下载插件库
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查储存空间
      if: (!cancelled())
      run: | 
        df -hT
        
    - name: 打包文件
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && github.event.inputs.UPLOAD_BIN_DIR == 'true' && !cancelled()
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 生成文件便签
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 打包上传固件
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && github.event.inputs.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}


    - name: 创建包标签
      id: tag
      if: github.event.inputs.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")-${{ github.event.inputs.model }}" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传至release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 结束工作流
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 7
        keep_minimum_runs: 4

    - name: 删除历史记录
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
